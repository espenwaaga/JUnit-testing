# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Runs a single command using the runners shell
    - name: Run a one-line script
      run: echo Hello, world!

    # Runs a single command using the runners shell
    - name: Run a one-line script
      run: echo Hello, world!

    - name: Kjører script som failer.
      if: always()
      id: steg
      run: |
        echo Add other actions to build,
        echo echoe echeoce ee e
        git tat aasdsada sdasdasd asd asd a


    - name: SUCCESSS
      if: always() && steps.steg.outcome == 'success'
      run: |
        echo Add other actions to build,
        echo echoe echeoce ee e

    - name: FAILURE
      if: always() && steps.steg.outcome == 'failure'
      run: |
        echo Add other actions to build,
        echo echoe echeoce ee e

    - name: Kjører script som går OK
      if: always()
      id: steg2
      run: |
        echo Add other actions to build,

    - name: SUCCESSS
      if: always() && steps.steg2.outcome == 'success'
      run: |
        echo Add other actions to build,
        echo echoe echeoce ee e

    - name: FAILURE
      if: always() && steps.steg2.outcome == 'failure'
      run: |
        echo Add other actions to build,
        echo echoe echeoce ee e


    - name: Generer testrapport
      if: always()
      shell: bash
      run: |
        git fetch origin gh-pages
        mkdir gh-pages
        git --work-tree=gh-pages checkout origin/gh-pages -- .
        cd gh-pages/fpsak
        echo "Testing" >> test.txt


    - name: Deploy testrapport
      if: always()
      uses: crazy-max/ghaction-github-pages@v2.0.0
      with:
        build_dir: gh-pages
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Setter miljøvariabler
      if: always() && steps.steg2.outcome == 'success'
      run: |
        echo "TRIGGER=JUnit-testing" >> $GITHUB_ENV
        echo "VERSION=latest" >> $GITHUB_ENV
        echo "TEST_RESULTAT=Tests run: 98, Failures: 0, Errors: 0, Skipped: 8" >> $GITHUB_ENV
        echo "DIFFERANSE=Testing" >> $GITHUB_ENV


    - name: Bygger opp slack melding
      if: always()
      shell: bash
      run: |
        echo "::set-env name=SLACK_MESSAGE::*Trigger*: ${{ env.TRIGGER }}:${{ env.VERSION }}%0A*Resultat*: ${{ env.TEST_RESULTAT }}, Rapport: <https://navikt.github.io/fpsak-autotest/fpsak|Allure rapport>%0A*Endringer*: ${{ env.DIFFERANSE }}%0A*Action URL*: <https://github.com/navikt/fpsak-autotest/actions/runs/${{ env.RUN_ID }}|Github Action Url>"
        echo "::set-env name=SLACK_TITLE::Autotestene er kjørt UTEN feil :rocket:"
        echo "::set-env name=SLACK_COLOR::#37df1d"


    - name: Slack Notification
      if: always()
      uses: rtCamp/action-slack-notify@v2.1.0
      env:
        SLACK_CHANNEL: vtp-autotest-resultat
        SLACK_COLOR: ${{ env.SLACK_COLOR }}
        SLACK_ICON: https://github.com/github.png?size=48
        SLACK_TITLE: ${{ env.SLACK_TITLE }}
        SLACK_MESSAGE: ${{ env.SLACK_MESSAGE }}
        SLACK_USERNAME: Github Action
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_FOOTER: ''
        MSG_MINIMAL: true
